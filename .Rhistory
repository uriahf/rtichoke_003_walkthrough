devtools::install_github("gadenbuie/xaringanExtra")
options(htmltools.dir.version = FALSE)
knitr::opts_chunk$set(
fig.width=9, fig.height=3.5, fig.retina=3,
out.width = "100%",
cache = FALSE,
echo = TRUE,
message = FALSE,
warning = FALSE,
hiline = TRUE
)
knitr::include_graphics("live_coding.jpg")
xaringan::infinite_moon_reader()
usethis::use_git()
usethis::use_git()
usethis::use_github()
usethis::use_git_remote("origin", url = NULL, overwrite = TRUE
)
usethis::use_git_remote("origin", url = NULL, overwrite = TRUE)
usethis::use_github_pages(branch = "master")
usethis::use_github()
usethis::use_github_pages()
usethis::use_github_pages(branch = "master")
usethis::use_github_pages(branch = "master")
options(htmltools.dir.version = FALSE)
knitr::opts_chunk$set(
fig.width=9, fig.height=3.5, fig.retina=3,
out.width = "100%",
cache = FALSE,
echo = TRUE,
message = FALSE,
warning = FALSE,
hiline = TRUE
)
prepare_performance_data(
probs = example_dat$estimated_probabilities,
real = example_dat$outcome
) %>%
head()
library(magrittr)
prepare_performance_data(
probs = example_dat$estimated_probabilities,
real = example_dat$outcome
) %>%
head()
rtichoke:::prepare_performance_data(
probs = example_dat$estimated_probabilities,
real = example_dat$outcome
) %>%
head()
library(rtichoke)
prepare_performance_data(
probs = example_dat$estimated_probabilities,
real = example_dat$outcome
) %>%
head()
prepare_performance_data(
probs = example_dat$estimated_probabilities,
real = example_dat$outcome
) %>%
head(6, 8)
options(htmltools.dir.version = FALSE)
knitr::opts_chunk$set(
fig.width=9, fig.height=3.5, fig.retina=3,
out.width = "100%",
cache = FALSE,
echo = TRUE,
message = FALSE,
warning = FALSE,
hiline = TRUE
)
create_roc_curve(
probs = example_dat$estimated_probabilities,
real = example_dat$outcome,
interactive = TRUE
) %>%
plotly::layout(width=300,
height=300)  %>%
plotly::animation_slider(
pad = list(t = 50)
)
library(magrittr)
create_roc_curve(
probs = example_dat$estimated_probabilities,
real = example_dat$outcome,
interactive = TRUE
) %>%
plotly::layout(width=300,
height=300)  %>%
plotly::animation_slider(
pad = list(t = 50)
)
library(Rtichoke)
library(rtichoke)
create_roc_curve(
probs = example_dat$estimated_probabilities,
real = example_dat$outcome,
interactive = TRUE
) %>%
plotly::layout(width=300,
height=300)  %>%
plotly::animation_slider(
pad = list(t = 50)
)
library(rtichoke)
prepare_performance_data(
probs = example_dat$estimated_probabilities,
real = example_dat$outcome
) %>%
head()
prepare_performance_data(
probs = example_dat$estimated_probabilities,
real = example_dat$outcome
) %>%
head(p = 14)
create_roc_curve(
probs = example_dat$estimated_probabilities,
real = example_dat$outcome,
interactive = TRUE
) %>%
plotly::layout(width=300,
height=350)  %>%
plotly::animation_slider(
pad = list(t = 50)
)
create_lift_curve(
probs = example_dat$estimated_probabilities,
real = example_dat$outcome,
interactive = TRUE
) %>%
plotly::layout(width=300,
height=350)  %>%
plotly::animation_slider(
pad = list(t = 50)
)
create_gains_curve(
probs = example_dat$estimated_probabilities,
real = example_dat$outcome,
interactive = TRUE
) %>%
plotly::layout(width=300,
height=350)  %>%
plotly::animation_slider(
pad = list(t = 50)
)
tibble::tribble(~"Curve", ~"Sens", ~"Spec", ~"PPV", ~"PPCR", ~"Lift", ~"NB", ~"P. Thr",
"ROC","y", "x", " ", " ", " ", " ", " ",
"Lift"," ", " ", " ", "x", "y", " ", " ",
"Gains","y", " ", " ", "x", " ", " ", " ",
"Precision Recall","x", " ", "y", " ", " ", " ", " ",
"Decision"," ", " ", " ", " ", " ", "y", "x") %>%
gt::gt(rowname_col = "Curve")   %>%
#
# gt::fmt_markdown(columns = c("Sens", "Spec", "PPV", "PPCR", "Lift", "NB", "P. Thr")) %>%
#
# gt::fmt_markdown(columns = everything()) %>%
gt::tab_style(
style = list(
gt::cell_text(weight = "bold")
),
locations = gt::cells_column_labels(dplyr::everything())
)  %>%
gt::opt_table_lines(extent = "default") %>%
gt::tab_options(
column_labels.border.top.color = "white",
column_labels.border.top.width = gt::px(3),
column_labels.border.bottom.color = "black",
table_body.hlines.color = "white",
table.border.bottom.color = "white",
table.border.bottom.width = gt::px(3)
) %>%
gt::cols_align(
columns = dplyr::everything(),
align = "center"
) %>%
gt::cols_width(
dplyr::everything() ~ gt::px(100)
)
create_calibration_curve(
probs = example_dat$estimated_probabilities,
real = example_dat$outcome,
interactive = TRUE
)
create_calibration_curve(
probs = example_dat$estimated_probabilities,
real = example_dat$outcome,
interactive = TRUE, type = "smooth"
)
xaringan:::inf_mr()
knit_with_parameters("~/rtichoke_documentation/rtichoke_003_walkthrough/rtichoke_003_walkthrough.Rmd", encoding = "UTF-8")
